# Copyright 2018 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/android/rules.gni")

# Targets are declared inside a template in autorolled/BUILD.gn so they can be
# imported here and be part of this BUILD.gn from gn's point of view.
import("//third_party/android_deps/autorolled/BUILD.gn")
define_autorolled_targets("unused") {
}

if (!limit_android_deps) {
  java_group("espresso_java") {
    preferred_dep = true
    testonly = true

    proguard_configs = [ "//third_party/androidx/espresso_proguard.flags" ]

    deps = [
      ":com_google_android_apps_common_testing_accessibility_framework_accessibility_test_framework_java",
      "//third_party/androidx:androidx_test_espresso_espresso_contrib_java",
      "//third_party/androidx:androidx_test_espresso_espresso_core_java",
      "//third_party/androidx:androidx_test_espresso_espresso_idling_resource_java",
      "//third_party/androidx:androidx_test_espresso_espresso_intents_java",
      "//third_party/androidx:androidx_test_espresso_espresso_web_java",
      "//third_party/androidx:chromium_espresso_overrides_java",
    ]
  }

  # TODO(agrieve): Delete this alias.
  java_group("guava_android_java") {
    deps = [ ":guava_java" ]
  }

  java_group("guava_java") {
    preferred_dep = true
    if (defined(guava_android_target)) {
      deps = [ guava_android_target ]
    } else {
      deps = [ ":com_google_guava_guava_java" ]
    }
  }

  java_group("robolectric_all_java") {
    preferred_dep = true
    testonly = true

    deps = [
      ":org_robolectric_annotations_java",
      ":org_robolectric_junit_java",
      ":org_robolectric_pluginapi_java",
      ":org_robolectric_resources_java",
      ":org_robolectric_robolectric_java",
      ":org_robolectric_sandbox_java",
      ":org_robolectric_shadowapi_java",
      ":org_robolectric_shadows_framework_java",
      ":org_robolectric_utils_java",
      ":org_robolectric_utils_reflector_java",
    ]
  }

  java_group("material_design_java") {
    preferred_dep = true
    if (defined(material_design_target)) {
      deps = [ material_design_target ]
    } else {
      deps = [
        "//third_party/android_deps:com_google_android_material_material_java",
      ]
    }
  }

  java_group("protobuf_lite_runtime_java") {
    preferred_dep = true
    if (defined(android_proto_runtime)) {
      deps = [ android_proto_runtime ]
    } else if (is_cronet_for_aosp_build) {
      # Note: This exists for Cronet in AOSP where we can't import prebuilts. We import
      # the raw sources and compile them using a specialized pipeline. See crbug.com/419480317.
      # TODO(https://crbug.com/425901872): Once we fix the proguard issue, also build Cronet in Chromium against raw sources to stay consistent.
      deps = [ "//third_party/protobuf:proto_runtime_lite_java" ]
    } else {
      deps = [ ":com_google_protobuf_protobuf_javalite_java" ]
    }
  }

  android_library("chromium_play_services_availability_java") {
    sources = [ "util/org/chromium/gms/ChromiumPlayServicesAvailability.java" ]
    deps = [
      "$google_play_services_package:google_play_services_base_java",
      "$google_play_services_package:google_play_services_basement_java",
      "//base:resetters_java",
    ]
  }

  java_group("playcore_java") {
    preferred_dep = true
    if (defined(playcore_target)) {
      deps = [ playcore_target ]
    } else {
      deps = [ "//third_party/android_deps:com_google_android_play_feature_delivery_java" ]
    }
  }
}

# The section below is generated by running
# `//tools/android/roll/android_deps/fetch_all.py`

# === Generated Code Start ===
# This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
java_prebuilt("com_android_tools_common_java") {
  jar_path = "cipd/libs/com_android_tools_common/common.jar"
  output_name = "com_android_tools_common"
  enable_bytecode_checks = false

  # This target does not come with most of its dependencies and is
  # only meant to be used by the resources shrinker. If you wish to use
  # this for other purposes, change buildCompileNoDeps in build.gradle.
  visibility = [ "//build/android/unused_resources:*" ]
}

# This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
java_prebuilt("com_android_tools_layoutlib_layoutlib_api_java") {
  jar_path =
      "cipd/libs/com_android_tools_layoutlib_layoutlib_api/layoutlib-api.jar"
  output_name = "com_android_tools_layoutlib_layoutlib_api"
  enable_bytecode_checks = false

  # This target does not come with most of its dependencies and is
  # only meant to be used by the resources shrinker. If you wish to use
  # this for other purposes, change buildCompileNoDeps in build.gradle.
  visibility = [ "//build/android/unused_resources:*" ]
}

# This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
java_prebuilt("com_android_tools_sdk_common_java") {
  jar_path = "cipd/libs/com_android_tools_sdk_common/sdk-common.jar"
  output_name = "com_android_tools_sdk_common"
  enable_bytecode_checks = false

  # This target does not come with most of its dependencies and is
  # only meant to be used by the resources shrinker. If you wish to use
  # this for other purposes, change buildCompileNoDeps in build.gradle.
  visibility = [ "//build/android/unused_resources:*" ]
}

# This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
java_prebuilt("com_squareup_javapoet_java") {
  jar_path = "cipd/libs/com_squareup_javapoet/javapoet.jar"
  output_name = "com_squareup_javapoet"
  enable_bytecode_checks = false
}
if (!limit_android_deps) {
  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("com_android_support_support_annotations_java") {
    jar_path = "cipd/libs/com_android_support_support_annotations/support-annotations.jar"
    output_name = "com_android_support_support_annotations"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  android_aar_prebuilt(
      "com_google_android_apps_common_testing_accessibility_framework_accessibility_test_framework_java") {
    aar_path = "cipd/libs/com_google_android_apps_common_testing_accessibility_framework_accessibility_test_framework/accessibility-test-framework.aar"
    info_path = "libs/com_google_android_apps_common_testing_accessibility_framework_accessibility_test_framework/com_google_android_accessibility_test_framework.info"
    enable_bytecode_checks = false
    testonly = true
    deps = [
      ":com_google_errorprone_error_prone_annotations_java",
      ":org_checkerframework_checker_qual_java",
      ":org_jsoup_jsoup_java",
      "//third_party/android_deps:guava_java",
      "//third_party/android_deps:material_design_java",
      "//third_party/android_deps:protobuf_lite_runtime_java",
      "//third_party/androidx:androidx_core_core_java",
      "//third_party/androidx:androidx_test_services_storage_java",
      "//third_party/hamcrest:hamcrest_core_java",
      "//third_party/hamcrest:hamcrest_library_java",
    ]
    include_java_resources = true
    proguard_configs =
        [ "local_modifications/accessibility_test_framework.pcfg" ]
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("com_googlecode_java_diff_utils_diffutils_java") {
    jar_path =
        "cipd/libs/com_googlecode_java_diff_utils_diffutils/diffutils.jar"
    output_name = "com_googlecode_java_diff_utils_diffutils"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
    testonly = true
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("net_bytebuddy_byte_buddy_java") {
    jar_path = "cipd/libs/net_bytebuddy_byte_buddy/byte-buddy.jar"
    output_name = "net_bytebuddy_byte_buddy"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false

    # Please depend on //third_party/byte_buddy:byte_buddy_android_java instead.
    visibility = [ "//third_party/byte_buddy:*" ]
    testonly = true
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_ccil_cowan_tagsoup_tagsoup_java") {
    jar_path = "cipd/libs/org_ccil_cowan_tagsoup_tagsoup/tagsoup.jar"
    output_name = "org_ccil_cowan_tagsoup_tagsoup"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
    testonly = true
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_checkerframework_checker_compat_qual_java") {
    jar_path = "cipd/libs/org_checkerframework_checker_compat_qual/checker-compat-qual.jar"
    output_name = "org_checkerframework_checker_compat_qual"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
    testonly = true
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_jetbrains_kotlin_kotlin_parcelize_runtime_java") {
    jar_path = "cipd/libs/org_jetbrains_kotlin_kotlin_parcelize_runtime/kotlin-parcelize-runtime.jar"
    output_name = "org_jetbrains_kotlin_kotlin_parcelize_runtime"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
    deps = [
      ":org_jetbrains_kotlin_kotlin_android_extensions_runtime_java",
      "//third_party/kotlin_stdlib:kotlin_stdlib_java",
    ]
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_jetbrains_kotlinx_atomicfu_jvm_java") {
    jar_path = "cipd/libs/org_jetbrains_kotlinx_atomicfu_jvm/atomicfu-jvm.jar"
    output_name = "org_jetbrains_kotlinx_atomicfu_jvm"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
    deps = [ "//third_party/kotlin_stdlib:kotlin_stdlib_java" ]
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_jetbrains_kotlinx_kotlinx_coroutines_guava_java") {
    jar_path = "cipd/libs/org_jetbrains_kotlinx_kotlinx_coroutines_guava/kotlinx-coroutines-guava.jar"
    output_name = "org_jetbrains_kotlinx_kotlinx_coroutines_guava"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
    deps = [
      ":org_jetbrains_kotlinx_kotlinx_coroutines_core_java",
      "//third_party/android_deps:guava_java",
      "//third_party/kotlin_stdlib:kotlin_stdlib_java",
    ]
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_jsoup_jsoup_java") {
    jar_path = "cipd/libs/org_jsoup_jsoup/jsoup.jar"
    output_name = "org_jsoup_jsoup"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
    testonly = true
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_mockito_mockito_android_java") {
    jar_path = "cipd/libs/org_mockito_mockito_android/mockito-android.jar"
    output_name = "org_mockito_mockito_android"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
    testonly = true
    deps = [
      ":org_mockito_mockito_core_java",
      "//third_party/byte_buddy:byte_buddy_android_java",
    ]
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_mockito_mockito_core_java") {
    jar_path = "cipd/libs/org_mockito_mockito_core/mockito-core.jar"
    output_name = "org_mockito_mockito_core"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
    testonly = true
    deps = [
      ":net_bytebuddy_byte_buddy_agent_java",
      ":org_objenesis_objenesis_java",
      "//third_party/byte_buddy:byte_buddy_android_java",
    ]

    # Uses java.time which does not exist until API 26.
    # Modifications are added in third_party/mockito.
    jar_excluded_patterns = [
      "org/mockito/internal/junit/ExceptionFactory*",
      "org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues*",
    ]

    # Because of dep on byte_buddy_android_java.
    bypass_platform_checks = true
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_mockito_mockito_subclass_java") {
    jar_path = "cipd/libs/org_mockito_mockito_subclass/mockito-subclass.jar"
    output_name = "org_mockito_mockito_subclass"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false
    testonly = true
    deps = [ ":org_mockito_mockito_core_java" ]
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("net_bytebuddy_byte_buddy_agent_java") {
    jar_path = "cipd/libs/net_bytebuddy_byte_buddy_agent/byte-buddy-agent.jar"
    output_name = "net_bytebuddy_byte_buddy_agent"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false

    # To remove visibility constraint, add this dependency to
    # //third_party/android_deps/build.gradle.
    visibility = [
      ":*",
      "//third_party/androidx:*",
    ]
    testonly = true
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_jetbrains_kotlin_kotlin_android_extensions_runtime_java") {
    jar_path = "cipd/libs/org_jetbrains_kotlin_kotlin_android_extensions_runtime/kotlin-android-extensions-runtime.jar"
    output_name = "org_jetbrains_kotlin_kotlin_android_extensions_runtime"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false

    # To remove visibility constraint, add this dependency to
    # //third_party/android_deps/build.gradle.
    visibility = [
      ":*",
      "//third_party/androidx:*",
    ]
    deps = [ "//third_party/kotlin_stdlib:kotlin_stdlib_java" ]
  }

  # This is generated, do not edit. Update BuildConfigGenerator.groovy instead.
  java_prebuilt("org_objenesis_objenesis_java") {
    jar_path = "cipd/libs/org_objenesis_objenesis/objenesis.jar"
    output_name = "org_objenesis_objenesis"
    supports_android = true
    requires_android = true
    enable_bytecode_checks = false

    # To remove visibility constraint, add this dependency to
    # //third_party/android_deps/build.gradle.
    visibility = [
      ":*",
      "//third_party/androidx:*",
    ]
    testonly = true
  }
}
# === Generated Code End ===
